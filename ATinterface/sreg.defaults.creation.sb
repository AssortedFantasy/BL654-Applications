// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Copyright (c) 2017, Laird                                                  ++
//                                                                            ++
// Permission to use, copy, modify, and/or distribute this software for any   ++
// purpose with or without fee is hereby granted, provided that the above     ++
// copyright notice and this permission notice appear in all copies.          ++
//                                                                            ++
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES   ++
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF           ++
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR    ++
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES     ++
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN      ++
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR ++
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.                ++
//                                                                            ++
// SPDX-License-Identifier:ISC                                                ++
//                                                                            ++
// <description>                                                              ++
//                                                                            ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// >> This application when launched outputs output that is used to copy and
// >> paste into $autorun$.AT.interface.sb at the location just above the line
// >> which contains #include "$LIB$.SRegInterface.sb".
// >> It provides #defines which are used to initialise SReg valus to defaults.
// >> This is done in this fashion to reduce the size of the compiled output
// >> so that it fits in the target file system
//
//******************************************************************************
// Compiler/Debug options
//******************************************************************************
//
//   ======================================================
//   Conditional Compile Masks (they can be additive)
//   ------------------------------------------------------
//
// Higher 16 bits used for feature set
//   0x00000000 : 
//
// Lower 16 bits used for debugging
//   0x00000001 : Enable debugging messages
//   0x00000002 : Enable Asserts printed out of UART
//   0x00000004 : Enable DbgXXX messages
//   0x00004000 : Enable S Register interface debugging
//   0x00008000 : Enable arg parsing prints
//
//   0x00010000 : Include Verbose Code for setting defaults
//   ======================================================
#set $cmpif, 0xFFFF4003
//
//******************************************************************************
// Definitions
//******************************************************************************

//Start of 8-Bit Register mapping
#define SREGNUM_START_8BIT                        100
#define SREGNUM_START_16BIT                       200
#define SREGNUM_START_32BIT                       300
#define SREGNUM_START_STR                         0

#define RSP_OK                                    0
#define RSP_ERROR_SAVE_FAIL                         50
#define RSP_ERROR_RESTORE_FAIL                      51
 
//******************************************************************************
// Global Variable Declarations
//******************************************************************************

//Result code variable (used for checking if a function completed successfully or not)
dim rc

//Don't care value
dim dontcare
dim dontcare$

//******************************************************************************
// Initialise Global Variable
//******************************************************************************


//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//------------------------------------------------------------------------------
// Assert to check that a resultCode is 0 which means success
//------------------------------------------------------------------------------
#cmpif 0x00000003 : sub AssertRC(rc, tag)
#cmpif 0x00000003 :     if (rc != 0) then
#cmpif 0x00000003 :         print "\n## Assert Error ";rc;" @ tag ";tag;"\r\n"
#cmpif 0x00000003 :     endif
#cmpif 0x00000003 : endsub

//------------------------------------------------------------------------------
// Assert to check that the value is as per specified
//------------------------------------------------------------------------------
#cmpif 0x00000003 : sub Assert(v1,v2,tag)
#cmpif 0x00000003 :     if (v1 != v2) then
#cmpif 0x00000003 :         print "\n## Assert Error ";v1;"!=";v2;"@ tag ";tag;"\r\n"
#cmpif 0x00000003 :     endif
#cmpif 0x00000003 : endsub

//------------------------------------------------------------------------------
// Assert to check that the value is as per specified
//------------------------------------------------------------------------------
#cmpif 0x00000003 : sub AssertNE(v1,v2,tag)
#cmpif 0x00000003 :     if (v1 == v2) then
#cmpif 0x00000003 :         print "\n## Assert Error ";v1;"!=";v2;"@ tag ";tag;"\r\n"
#cmpif 0x00000003 :     endif
#cmpif 0x00000003 : endsub

//------------------------------------------------------------------------------
// Assert to check that the value is as per specified
//------------------------------------------------------------------------------
#cmpif 0x00000003 : sub AssertBound(v,vl,vh,tag)
#cmpif 0x00000003 :     if (v < vl) then
#cmpif 0x00000003 :         print "\n## Assert Error ";v;"<";vl
#cmpif 0x00000003 :     elseif (v > vh) then
#cmpif 0x00000003 :         print "\n## Assert Error ";v;">";vh
#cmpif 0x00000003 :     else
#cmpif 0x00000003 :         exitsub
#cmpif 0x00000003 :     endif
#cmpif 0x00000003 :     print " @ tag ";tag;"\r\n"
#cmpif 0x00000003 : endsub

//------------------------------------------------------------------------------
#cmpif 0x00000004 : dim dbgmsg$  //use this to create a message for DbgMsg() 
//------------------------------------------------------------------------------
#cmpif 0x00000004 : sub DbgMsg(byval msg$ as string)
#cmpif 0x00000004 :     print "\n## ";msg$
#cmpif 0x00000004 : endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#cmpif 0x00000004 : sub DbgMsgVal(byval msg$ as string, byval vl as integer)
#cmpif 0x00000004 :     print "\n## ";msg$;" ";vl
#cmpif 0x00000004 : endsub

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#cmpif 0x00000004 : sub DbgMsgVal$(byval msg$ as string, byref vl$ as string)
#cmpif 0x00000004 :     print "\n## ";msg$;" ";vl$
#cmpif 0x00000004 : endsub 

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
function Escape$(s$)
  dim e$ : e$=""
  dim ln : ln = strlen(s$)
  dim i, ch
  dim f$
  
  for i = 0 to (ln-1)
    ch=StrGetChr(s$,i)
    sprint #f$,integer.h' ch
    f$=right$(f$,2)
    e$=e$ + "\5C" + f$
  next
endfunc e$

//******************************************************************************
// Initialisation values for sregister caches ...
//
// These values are created by running the application "sreg.defaults.creation.sb"
// and then copy/pasting it's output here - verbatim.
//
// This technique is used to reduce the size of the .uwc file of the main sb file
//******************************************************************************

//-------------------------------------------------------------------
//                  100+    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9
#define SREGINIT_VAL8_0  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
#define SREGINIT_MIN8_0  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
#define SREGINIT_MAX8_0  "\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F"
//                  120+    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9
#define SREGINIT_VAL8_1  "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
#define SREGINIT_MIN8_1  "\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80"
#define SREGINIT_MAX8_1  "\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F\7F"
//                  200+    0     1     2     3     4     5     6     7    8     9
#define SREGINIT_VAL16_0 "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
#define SREGINIT_MIN16_0 "\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80"
#define SREGINIT_MAX16_0 "\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F"
//                  210+    0     1     2     3     4     5     6     7    8     9
#define SREGINIT_VAL16_1 "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
#define SREGINIT_MIN16_1 "\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80\00\80"
#define SREGINIT_MAX16_1 "\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F\FF\7F"
//                  300+    0           1           2           3          4
#define SREGINIT_VAL32_0 "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
#define SREGINIT_MIN32_0 "\00\00\00\80\00\00\00\80\00\00\00\80\00\00\00\80\00\00\00\80"
#define SREGINIT_MAX32_0 "\FF\FF\FF\7F\FF\FF\FF\7F\FF\FF\FF\7F\FF\FF\FF\7F\FF\FF\FF\7F"
//                  305+    0           1           2           3          4
#define SREGINIT_VAL32_1 "\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00"
#define SREGINIT_MIN32_1 "\00\00\00\80\00\00\00\80\00\00\00\80\00\00\00\80\00\00\00\80"
#define SREGINIT_MAX32_1 "\FF\FF\FF\7F\FF\FF\FF\7F\FF\FF\FF\7F\FF\FF\FF\7F\FF\FF\FF\7F"
//-------------------------------------------------------------------

#include "$LIB$.SRegInterface.sb"

SReg8SetCache()
SReg16SetCache()
SReg32SetCache()
SRegStrSetCache()

//print the values that can be easily cut and pasted

print "\n//------------------------------------------------------------------------------"
print "\n//                  100+    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9"
print "\n#define SREGINIT_VAL8_0  \22"; Escape$(SregCache8$[0]) ;"\22"
print "\n#define SREGINIT_MIN8_0  \22"; Escape$(SregMin8$[0]) ;"\22"
print "\n#define SREGINIT_MAX8_0  \22"; Escape$(SregMax8$[0]) ;"\22"
print "\n//                  120+    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9"
print "\n#define SREGINIT_VAL8_1  \22"; Escape$(SregCache8$[1]) ;"\22"
print "\n#define SREGINIT_MIN8_1  \22"; Escape$(SregMin8$[1]) ;"\22"
print "\n#define SREGINIT_MAX8_1  \22"; Escape$(SregMax8$[1]) ;"\22"
print "\n//                  200+    0     1     2     3     4     5     6     7    8     9"
print "\n#define SREGINIT_VAL16_0 \22"; Escape$(SregCache16$[0]) ;"\22"
print "\n#define SREGINIT_MIN16_0 \22"; Escape$(SregMin16$[0]) ;"\22"
print "\n#define SREGINIT_MAX16_0 \22"; Escape$(SregMax16$[0]) ;"\22"
print "\n//                  210+    0     1     2     3     4     5     6     7    8     9"
print "\n#define SREGINIT_VAL16_1 \22"; Escape$(SregCache16$[1]) ;"\22"
print "\n#define SREGINIT_MIN16_1 \22"; Escape$(SregMin16$[1]) ;"\22"
print "\n#define SREGINIT_MAX16_1 \22"; Escape$(SregMax16$[1]) ;"\22"
print "\n//                  300+    0           1           2           3          4"
print "\n#define SREGINIT_VAL32_0 \22"; Escape$(SregCache32$[0]) ;"\22"
print "\n#define SREGINIT_MIN32_0 \22"; Escape$(SregMin32$[0]) ;"\22"
print "\n#define SREGINIT_MAX32_0 \22"; Escape$(SregMax32$[0]) ;"\22"
print "\n//                  305+    0           1           2           3          4"
print "\n#define SREGINIT_VAL32_1 \22"; Escape$(SregCache32$[1]) ;"\22"
print "\n#define SREGINIT_MIN32_1 \22"; Escape$(SregMin32$[1]) ;"\22"
print "\n#define SREGINIT_MAX32_1 \22"; Escape$(SregMax32$[1]) ;"\22"
print "\n//------------------------------------------------------------------------------"
